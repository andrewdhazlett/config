(function() {
  var TernView, client, clientFactory, tern, ternServerFactory, _;

  TernView = require('./tern-view');

  ternServerFactory = require('./server');

  _ = require('underscore-plus');

  clientFactory = require('./client');

  client = null;

  tern = module.exports = {
    autocompleteViews: [],
    update: editor(function() {
      return client.update(editor.getUri(), editor.getText());
    }),
    checkCompletion: function(editor, force) {
      var buffer, col, cursor, lastChar, row;
      if (force == null) {
        force = false;
      }
      cursor = editor.getCursor();
      row = cursor.getBufferRow();
      buffer = editor.getBuffer();
      col = cursor.getBufferColumn();
      lastChar = buffer.getTextInRange([[row, col - 1], [row, col]]);
      if (lastChar === '.' || force === true) {
        buffer.off('contents-modified');
        return client.completions(editor.getUri(), {
          line: row,
          ch: col
        }, editor.getText()).then((function(_this) {
          return function(data) {
            _this.start = data.start, _this.end = data.end;
            return _this.ternView.startCompletion(data.completions);
          };
        })(this), function(err) {
          return console.error('error', err);
        });
      }
    },
    registerEvents: function() {
      return atom.workspace.eachEditor((function(_this) {
        return function(editor) {
          var buffer;
          if (editor.getGrammar().name !== 'JavaScript') {
            return;
          }
          buffer = editor.getBuffer();
          buffer.on('contents-modified', _.throttle(_this.update.bind(_this, editor), 2000));
          return buffer.on('contents-modified', _this.checkCompletion.bind(_this, editor, false));
        };
      })(this));
    },
    activate: function(state) {
      this.ternView = new TernView();
      this.ternView.on('completed', (function(_this) {
        return function(evt, data) {
          var end, start;
          if ((data != null ? data.name : void 0)) {
            start = [_this.start.line, _this.start.ch];
            end = [_this.end.line, _this.end.ch];
            atom.workspace.getActiveEditor().getBuffer().setTextInRange([start, end], data.name || 'asd');
          }
          return _this.registerEvents();
        };
      })(this));
      atom.workspaceView.command("tern:start-server", (function(_this) {
        return function() {
          _this.server = ternServerFactory();
          return _this.server.start(function(port) {
            _this.ternPort = port;
            client = clientFactory(port);
            return atom.workspaceView.command("tern:completion", function() {
              return _this.checkCompletion(atom.workspace.getActiveEditor(), true);
            });
          });
        };
      })(this));
      return this.registerEvents();
    },
    deactivate: function() {
      this.ternView.destroy();
      this.server.stop();
      return this.ternview = null;
    },
    serialize: function() {
      return {
        ternViewState: this.ternView.serialize()
      };
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDJEQUFBOztBQUFBLEVBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxhQUFSLENBQVgsQ0FBQTs7QUFBQSxFQUNBLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxVQUFSLENBRHBCLENBQUE7O0FBQUEsRUFFQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBRkosQ0FBQTs7QUFBQSxFQUdBLGFBQUEsR0FBaUIsT0FBQSxDQUFRLFVBQVIsQ0FIakIsQ0FBQTs7QUFBQSxFQUlBLE1BQUEsR0FBUyxJQUpULENBQUE7O0FBQUEsRUFLQSxJQUFBLEdBQU8sTUFBTSxDQUFDLE9BQVAsR0FDSDtBQUFBLElBQUEsaUJBQUEsRUFBbUIsRUFBbkI7QUFBQSxJQUNBLE1BQUEsRUFBUSxNQUFBLENBQU8sU0FBQSxHQUFBO2FBQ1gsTUFBTSxDQUFDLE1BQVAsQ0FBYyxNQUFNLENBQUMsTUFBUCxDQUFBLENBQWQsRUFBK0IsTUFBTSxDQUFDLE9BQVAsQ0FBQSxDQUEvQixFQURXO0lBQUEsQ0FBUCxDQURSO0FBQUEsSUFJQSxlQUFBLEVBQWlCLFNBQUMsTUFBRCxFQUFTLEtBQVQsR0FBQTtBQUNiLFVBQUEsa0NBQUE7O1FBRHNCLFFBQVE7T0FDOUI7QUFBQSxNQUFBLE1BQUEsR0FBUyxNQUFNLENBQUMsU0FBUCxDQUFBLENBQVQsQ0FBQTtBQUFBLE1BQ0EsR0FBQSxHQUFNLE1BQU0sQ0FBQyxZQUFQLENBQUEsQ0FETixDQUFBO0FBQUEsTUFFQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFNBQVAsQ0FBQSxDQUZULENBQUE7QUFBQSxNQUdBLEdBQUEsR0FBTSxNQUFNLENBQUMsZUFBUCxDQUFBLENBSE4sQ0FBQTtBQUFBLE1BSUEsUUFBQSxHQUFXLE1BQU0sQ0FBQyxjQUFQLENBQXNCLENBQUMsQ0FBQyxHQUFELEVB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
//# sourceURL=/Users/andrewhazlett/.atom/packages/Tern/lib/tern.coffee