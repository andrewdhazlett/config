{"_id":"acorn","_rev":"29-6f1d64465b24d2e106d0a792d77d8a02","name":"acorn","description":"ECMAScript parser","dist-tags":{"latest":"0.6.0"},"versions":{"0.0.1":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.0.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repositories":[{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},{"type":"git","url":"https://github.com/marijnh/acorn.git"}],"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"_id":"acorn@0.0.1","dist":{"shasum":"326bc57985a3433daa37308845359e684fe49f17","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.0.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.1.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.1.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repositories":[{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},{"type":"git","url":"https://github.com/marijnh/acorn.git"}],"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"_id":"acorn@0.1.0","dist":{"shasum":"d278d28e293186aa1c7984704eaa0b3b88989b9c","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.1.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.2.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.2.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repositories":[{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},{"type":"git","url":"https://github.com/marijnh/acorn.git"}],"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.2.0","dist":{"shasum":"94a50d2c55c3741df5bdbc6e0fa5663a880889bb","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.3.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.3.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.3.0","dist":{"shasum":"35b326d4f11393e4368a7ebd135987593cc1884c","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.3.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.3.1":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.3.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.3.1","dist":{"shasum":"9f0949f8decd3e544b5c8197e7843ee58d8cc9ee","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.3.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.4.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.4.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.4.0","dist":{"shasum":"2e1e880975278cc2538afb6a051e86e3c0befb99","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.4.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.4.2":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.4.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.4.2","dist":{"shasum":"c79a8c12e98fe6c5a600f28070232d4ede308b0e","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.4.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.5.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.5.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.5.0","dist":{"shasum":"f342114b20e314c5fe7f72e8b7b37239604ea40c","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.5.0.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}},"0.6.0":{"name":"acorn","description":"ECMAScript parser","homepage":"http://marijnhaverbeke.nl/acorn/","main":"acorn.js","version":"0.6.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"licenses":[{"type":"MIT","url":"http://marijnhaverbeke.nl/acorn/LICENSE"}],"scripts":{"test":"node test/run.js"},"bin":{"acorn":"./bin/acorn"},"_id":"acorn@0.6.0","dist":{"shasum":"6e3d2156facfb363368bdabc735ca15e4e7513b3","tarball":"http://registry.npmjs.org/acorn/-/acorn-0.6.0.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"marijn","email":"marijnh@gmail.com"},"directories":{}}},"readme":"# Acorn\n\nA tiny, fast JavaScript parser, written completely in JavaScript.\n\n## Installation\n\nThe easiest way to install acorn is with [`npm`][npm].\n\n[npm]: http://npmjs.org\n\n```sh\nnpm install acorn\n```\n\nAlternately, download the source.\n\n```sh\ngit clone https://github.com/marijnh/acorn.git\n```\n\n## Components\n\nWhen run in a CommonJS (node.js) or AMD environment, exported values\nappear in the interfaces exposed by the individual files, as usual.\nWhen loaded in the browser (Acorn works in any JS-enabled browser more\nrecent than IE5) without any kind of module management, a single\nglobal object `acorn` will be defined, and all the exported properties\nwill be added to that.\n\n### acorn.js\n\nThis file contains the actual parser (and is what you get when you\n`require(\"acorn\")` in node.js).\n\n**parse**`(input, options)` is used to parse a JavaScript program.\nThe `input` parameter is a string, `options` can be undefined or an\nobject setting some of the options listed below. The return value will\nbe an abstract syntax tree object as specified by the\n[Mozilla Parser API][mozapi].\n\nWhen  encountering   a  syntax   error,  the   parser  will   raise  a\n`SyntaxError` object with a meaningful  message. The error object will\nhave a `pos` property that indicates the character offset at which the\nerror occurred,  and a `loc`  object that contains a  `{line, column}`\nobject referring to that same position.\n\n[mozapi]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n- **ecmaVersion**: Indicates the ECMAScript version to parse. Must be\n  either 3, 5, or 6. This influences support for strict mode, the set\n  of reserved words, and support for getters and setter. Default is 5.\n  ES6 is only partially supported.\n\n- **strictSemicolons**: If `true`, prevents the parser from doing\n  automatic semicolon insertion, and statements that do not end with\n  a semicolon will generate an error. Defaults to `false`.\n\n- **allowTrailingCommas**: If `false`, the parser will not allow\n  trailing commas in array and object literals. Default is `true`.\n\n- **forbidReserved**: If `true`, using a reserved word will generate\n  an error. Defaults to `false`. When given the value `\"everywhere\"`,\n  reserved words and keywords can also not be used as property names\n  (as in Internet Explorer's old parser).\n  \n- **allowReturnOutsideFunction**: By default, a return statement at\n  the top level raises an error. Set this to `true` to accept such\n  code.\n\n- **locations**: When `true`, each node has a `loc` object attached\n  with `start` and `end` subobjects, each of which contains the\n  one-based line and zero-based column numbers in `{line, column}`\n  form. Default is `false`.\n\n- **onComment**: If a function is passed for this option, whenever a\n  comment is encountered the function will be called with the\n  following parameters:\n\n  - `block`: `true` if the comment is a block comment, false if it\n    is a line comment.\n  - `text`: The content of the comment.\n  - `start`: Character offset of the start of the comment.\n  - `end`: Character offset of the end of the comment.\n\n  When the `locations` options is on, the `{line, column}` locations\n  of the comment’s start and end are passed as two additional\n  parameters.\n\n  Note that you are not allowed to call the parser from the\n  callback—that will corrupt its internal state.\n\n- **ranges**: Nodes have their start and end characters offsets\n  recorded in `start` and `end` properties (directly on the node,\n  rather than the `loc` object, which holds line/column data. To also\n  add a [semi-standardized][range] \"range\" property holding a\n  `[start, end]` array with the same numbers, set the `ranges` option\n  to `true`.\n\n- **program**: It is possible to parse multiple files into a single\n  AST by passing the tree produced by parsing the first file as the\n  `program` option in subsequent parses. This will add the toplevel\n  forms of the parsed file to the \"Program\" (top) node of an existing\n  parse tree.\n\n- **sourceFile**: When the `locations` option is `true`, you can pass\n  this option to add a `sourceFile` attribute in every node’s `loc`\n  object. Note that the contents of this option are not examined or\n  processed in any way; you are free to use whatever format you\n  choose.\n\n- **directSourceFile**: Like `sourceFile`, but the property will be\n  added directly to the nodes, rather than to a `loc` object.\n\n[range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n\n**getLineInfo**`(input, offset)` can be used to get a `{line,\ncolumn}` object for a given program string and character offset.\n\n**tokenize**`(input, options)` exports a primitive interface to\nAcorn's tokenizer. The function takes an input string and options\nsimilar to `parse` (though only some options are meaningful here), and\nreturns a function that can be called repeatedly to read a single\ntoken, and returns a `{start, end, type, value}` object (with added\n`startLoc` and `endLoc` properties when the `locations` option is\nenabled). This object will be reused (updated) for each token, so you\ncan't count on it staying stable.\n\n**tokTypes** holds an object mapping names to the token type objects\nthat end up in the `type` properties of tokens.\n\n### acorn_loose.js ###\n\nThis file implements an error-tolerant parser. It exposes a single\nfunction.\n\n**parse_dammit**`(input, options)` takes the same arguments and\nreturns the same syntax tree as the `parse` function in `acorn.js`,\nbut never raises an error, and will do its best to parse syntactically\ninvalid code in as meaningful a way as it can. It'll insert identifier\nnodes with name `\"✖\"` as placeholders in places where it can't make\nsense of the input. Depends on `acorn.js`, because it uses the same\ntokenizer.\n\n### util/walk.js ###\n\nImplements an abstract syntax tree walker. Will store its interface in\n`acorn.walk` when used without a module system.\n\n**simple**`(node, visitors, base, state)` does a 'simple' walk over\na tree. `node` should be the AST node to walk, and `visitors` an\nobject with properties whose names correspond to node types in the\n[Mozilla Parser API][mozapi]. The properties should contain functions\nthat will be called with the node object and, if applicable the state\nat that point. The last two arguments are optional. `base` is a walker\nalgorithm, and `state` is a start state. The default walker will\nsimply visit all statements and expressions and not produce a\nmeaningful state. (An example of a use of state it to track scope at\neach point in the tree.)\n\n**ancestor**`(node, visitors, base, state)` does a 'simple' walk over\na tree, building up an array of ancestor nodes (including the current node)\nand passing the array to callbacks in the `state` parameter.\n\n**recursive**`(node, state, functions, base)` does a 'recursive'\nwalk, where the walker functions are responsible for continuing the\nwalk on the child nodes of their target node. `state` is the start\nstate, and `functions` should contain an object that maps node types\nto walker functions. Such functions are called with `(node, state, c)`\narguments, and can cause the walk to continue on a sub-node by calling\nthe `c` argument on it with `(node, state)` arguments. The optional\n`base` argument provides the fallback walker functions for node types\nthat aren't handled in the `functions` object. If not given, the\ndefault walkers will be used.\n\n**make**`(functions, base)` builds a new walker object by using the\nwalker functions in `functions` and filling in the missing ones by\ntaking defaults from `base`.\n\n**findNodeAt**`(node, start, end, test, base, state)` tries to\nlocate a node in a tree at the given start and/or end offsets, which\nsatisfies the predicate `test`. `start` end `end` can be either `null`\n(as wildcard) or a number. `test` may be a string (indicating a node\ntype) or a function that takes `(nodeType, node)` arguments and\nreturns a boolean indicating whether this node is interesting. `base`\nand `state` are optional, and can be used to specify a custom walker.\nNodes are tested from inner to outer, so if two nodes match the\nboundaries, the inner one will be preferred.\n\n**findNodeAround**`(node, pos, test, base, state)` is a lot like\n`findNodeAt`, but will match any node that exists 'around' (spanning)\nthe given position.\n\n**findNodeAfter**`(node, pos, test, base, state)` is similar to\n`findNodeAround`, but will match all nodes *after* the given position\n(testing outer nodes before inner nodes).\n\n## Command line interface\n\nThe `bin/acorn` utility can be used to parse a file from the command\nline. It accepts as arguments its input file and the following\noptions:\n\n- `--ecma3|--ecma5`: Sets the ECMAScript version to parse. Default is\n  version 5.\n\n- `--strictSemicolons`: Prevents the parser from doing automatic\n  semicolon insertion. Statements that do not end in semicolons will\n  generate an error.\n\n- `--locations`: Attaches a \"loc\" object to each node with \"start\" and\n  \"end\" subobjects, each of which contains the one-based line and\n  zero-based column numbers in `{line, column}` form.\n\n- `--compact`: No whitespace is used in the AST output.\n\n- `--silent`: Do not output the AST, just return the exit status.\n\n- `--help`: Print the usage information and quit.\n\nThe utility spits out the syntax tree as JSON data.\n","maintainers":[{"name":"marijn","email":"marijnh@gmail.com"}],"time":{"modified":"2014-06-06T20:42:57.280Z","created":"2012-09-24T10:10:49.310Z","0.0.1":"2012-09-24T10:10:52.687Z","0.1.0":"2013-02-14T08:59:47.842Z","0.2.0":"2013-05-03T09:53:34.809Z","0.3.0":"2013-06-11T10:40:15.246Z","0.3.1":"2013-06-11T10:44:07.733Z","0.4.0":"2013-10-10T08:40:52.887Z","0.4.2":"2013-10-15T11:12:20.345Z","0.5.0":"2014-03-12T16:31:54.007Z","0.6.0":"2014-06-06T20:42:57.280Z"},"repository":{"type":"git","url":"http://marijnhaverbeke.nl/git/acorn"},"homepage":"http://marijnhaverbeke.nl/acorn/","readmeFilename":"README.md","users":{"battlesnake":true},"_attachments":{},"_etag":"\"AP410L67VQ43KQ4YPOPD48VQ1\""}