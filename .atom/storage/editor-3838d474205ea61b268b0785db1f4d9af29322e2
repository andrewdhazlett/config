{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":2560,"height":1440},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters","buffers":[{"text":"### A wrapper that gets everything ready for the Mandrill api ###\n\n# this function helps Mandrill messages play nice with the unsubscribe package\n# we don't actually use it here now, TODO: move to the Mandrill package itself\nmandrillMessageRejectUnsubscribers = (message) ->\n  recipients = _.pick message, 'to', 'cc', 'bcc'\n  recipients = _.map recipients, (value, key) ->\n    emails = _.pluck value, 'email'\n    key: _.map (rejectUnsubscribers emails), (email) -> email: email\n  _.extend message, recipients\n\ndefaultEmail = (emails) ->\n  key: Meteor.Mandrill.apiKey\n  template_content: []\n  message: _.extend\n    from_email: EmailService.fromAddress,\n    makeRecipients emails\n\nmakeRecipients = (emails) ->\n  if _.isString emails then emails = emails.split ','\n  emails = rejectUnsubscribers emails\n  emails = (email: email for email in emails)\n  if emails?.length > 1 then bcc: emails else to: emails\n\nmakeMergeVars = (obj) -> _.map obj, (value, key) -> content: value, name: key\n\n@MandrillWrapper =\n\n  sendSMTPEmails: (emails, subject, html) ->\n    recipients = makeRecipients emails\n    _.extend options, recipients,\n      from: EmailService.fromAddress, subject: subject, html: html,\n    Meteor.Mandrill.send options\n\n  renderTemplate: (templateName, templateContent) ->\n    Meteor.Mandrill.renderTemplate\n      key: Meteor.Mandrill.apiKey\n      template_name: templateName\n      template_content: templateContent or []\n\n  # recipients is a string or array of strings, mergeVars is a key-value store\n  sendTemplate: (recipients, templateName, mergeVars, templateContent) ->\n    options = _.extend (defaultEmail recipients),\n      template_name: templateName,\n      template_content: makeMergeVars templateContent or {}\n    # create and add the mergeVars\n    _.extend options.message, global_merge_vars: makeMergeVars mergeVars\n    # add a subaccount if we have one\n    if Meteor.settings.mandrill?.subaccount? then _.extend options.message,\n      subaccount: Meteor.settings.mandrill.subaccount\n\n    # validate that everything is good for the mandrill api\n    if Match.test options, MandrillTemplateSchema\n      Meteor.Mandrill.sendTemplate options\n    else\n      badMessage = not Match.test options.message, MessageSchema\n      badRecipients = not _.all options.message.to, (recipient) ->\n        Match.test recipient, RecipientSchema\n      badMergeVars = not _.all options.message.global_merge_vars, (content) ->\n        Match.test content, EmailContentSchema\n      badTemplateContent = not _.all options.template_content, (content) ->\n        Match.test content, MessageSchema\n      errorMessage = 'MandrillWrapper.sendTemplate: ' + switch\n        when badRecipients then 'bad message.to'\n        when badMergeVars then 'bad global_merge_vars'\n        when badMessage then 'bad options.message'\n        when badTemplateContent then 'bad template_content'\n      throw new Error errorMessage + JSON.stringify options, null, 2\n","markers":{"markers":{"1":{"id":1,"range":[[33,0],[33,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":3506,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/server/mandrillWrapper.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ecef69d6e7bd279086b91e73783c6d301d0ca7c5","deserializer":"TextBuffer"},{"text":"### Define a schema for campaign emails generated by an application ###\n\nRecipientSchema = new SimpleSchema\n  email: type: String\n  name: type: String, optional: yes\n  type: type: String, optional: yes, allowedValues: ['to', 'cc', 'bcc']\n\nEmailContentSchema = new SimpleSchema\n  name: type: String\n  content: type: String\n\nMessageSchema = new SimpleSchema\n  to: type: [RecipientSchema], minCount: 1\n  from_email: type: String, optional: yes\n  global_merge_vars: type: [EmailContentSchema]\n  subaccount: type: String, optional: yes\n\nMandrillTemplateSchema = new SimpleSchema\n  key: type: String\n  template_name: type: String\n  template_content: type: [EmailContentSchema]\n  message: type: MessageSchema\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[22,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":3512,"goalBufferRange":null,"autoscroll":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/collections/emails.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"30039504689de80630133b69f774aed6abc6f37b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":83,"items":[{"id":3506,"softTabs":true,"displayBuffer":{"id":3507,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/server/mandrillWrapper.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":3512,"softTabs":true,"displayBuffer":{"id":3513,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/collections/emails.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/collections/emails.coffee","focused":false,"deserializer":"Pane"},"activePaneId":83,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-coffee-script"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/server/mandrillWrapper.coffee":1410211946922,"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/collections/emails.coffee":1410212278570},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":2325055},"tree-view":{"directoryExpansionStates":{"collections":{},"server":{},"tests":{"acceptance":{},"integration":{},"mocks":{},"unit":{}}},"selectedPath":"/Users/andrewhazlett/Dev/src/smartPackages/email-supporters/collections/emails.coffee","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":280},"coffee-lint":{"height":0},"gitter":{},"find-and-replace":{"viewState":{"findHistory":["setRepliedToLastEmail","invalid"],"replaceHistory":["bad"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["console.log","setRepliedToLastEmail","generateNextBlast","generateNextSingleBlast","qaEmailResponse","absoluteUrl","sponsor","sponsor.email","sponsor","sponsorAd","sponsor","asdfAd","refer","referral","MandrillTemplateSchema","makecampaignemail","sendTemplate","rapper.sendTemplate","makeCampaign","MandrillTemplate"],"replaceHistory":["supporter.email"],"pathsHistory":["tests","client","tests","collections","server","client"],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}}}}