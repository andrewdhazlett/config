{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":2560,"height":1440},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points","buffers":[{"text":"Template.membersLeaderboard.helpers\n  sortedMembers: -> (_.sortBy @members, 'points').reverse()\n  sortedAdmins: -> (_.sortBy @admins, 'points').reverse()\n  # TODO: don't access Points here directly; instead set in route data\n  goalPoints: -> Points.studentGoal\n  percentToGoal: -> toPercent @points / Points.studentGoal\n\ntoPercent = (fraction) -> Math.ceil 100 * fraction, 100\n","markers":{"markers":{"1":{"id":1,"range":[[8,0],[8,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":668,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"},"58":{"id":58,"range":[[5,19],[5,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"128":{"id":128,"range":[[5,19],[5,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"204":{"id":204,"range":[[0,0],[5,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"89e5db3650b49e7af9ead30272ede2c6fc9c290e","deserializer":"TextBuffer"},{"text":"Template.groupLeaderboard.helpers\n  sortedGroups: -> (_.sortBy @organization?.groups, 'points').reverse()\n  # TODO: don't access Points here directly; instead set in route data\n  goalPoints: -> Points.studentGoal * @members.length\n  percentToGoal: -> toPercent @points / (Points.studentGoal * @members.length)\n\ntoPercent = (fraction) -> Math.ceil 100 * fraction, 100\n","markers":{"markers":{"1":{"id":1,"range":[[5,0],[5,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":925,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"60":{"id":60,"range":[[6,12],[6,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a90cfea905596a197559e7862f6949db0bd23a4f","deserializer":"TextBuffer"},{"text":"Package.describe({\n  summary: \"Keep track of points within an organization\"\n});\n\nPackage.on_use(function (api, where) {\n\n  /* meteor packages */\n  api.use(['coffeescript', 'underscore'], ['client', 'server']);\n  api.use(['less', 'templating', 'ui'], ['client'])\n\n  /* atmosphere packages */\n  api.use(['simple-schema',\n           'collection2',\n           'autoform',\n           'iron-router'],\n          ['client', 'server']);\n\n  api.export(['MemberSchema',\n              'GroupSchema',\n              'OrganizationSchema',\n              'Organizations',\n              'OrganizationHelpers'],\n             ['client', 'server']);\n  api.export(['PointsHub'], ['server']);\n\n  api.add_files(['collections/organizations.coffee',\n                 'collections/users.coffee',\n                 'helpers/organization.coffee'],\n                ['client', 'server']);\n  api.add_files(['client/custom.less',\n                 'client/views/groupLeaderboard.html',\n                 'client/views/groupLeaderboard.coffee',\n                 'client/views/leaderboard.html',\n                 'client/views/leaderboard.coffee',\n                 'client/views/organization.html',\n                 'client/views/organization.coffee',\n                 'client/views/roster/roster.html',\n                 'client/views/roster/roster.coffee',\n                 'client/views/roster/singleClass.html',\n                 'client/views/roster/student.html',\n                 'client/views/roster/student.coffee',\n                 'client/helpers/account.coffee'],\n                ['client']);\n  api.add_files(['pointsHub.coffee'], ['server'])\n});\n\nPackage.on_test(function (api) {\n  api.use(['accounts-password',\n           'coffeescript',\n           'templating',\n           'test-helpers',\n           'tinytest',\n           'underscore'],\n          ['client', 'server']);\n  api.use(['organization-points'],\n          ['client', 'server']);\n\n});\n","markers":{"markers":{"1":{"id":1,"range":[[25,45],[25,45]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":986,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"4":{"id":4,"range":[[22,0],[22,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"25":{"id":25,"range":[[31,0],[31,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"62":{"id":62,"range":[[31,0],[31,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"84":{"id":84,"range":[[9,0],[9,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"155":{"id":155,"range":[[8,0],[9,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"156":{"id":156,"range":[[25,0],[31,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"157":{"id":157,"range":[[43,0],[43,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"158":{"id":158,"range":[[8,0],[9,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"159":{"id":159,"range":[[25,0],[31,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"160":{"id":160,"range":[[43,0],[43,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/package.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4046c5af15d03f52d4b09d3b1280968e9cce2259","deserializer":"TextBuffer"},{"text":"MemberSchema = new SimpleSchema\n  userId:\n    type: String\n    max: 24\n    optional: true\n  username:\n    type: String\n    max: 100\n    optional: true\n  email:\n    type: String\n    regEx: SimpleSchema.RegEx.Email\n    max: 100\n    optional: true\n  points:\n    type: Number\n    optional: true\n  organizationId: # hack to pass organization id to meteor method from autoform\n    type: String\n    max: 24\n    optional: true\n\nGroupSchema = new SimpleSchema\n  groupId:\n    type: String\n    max: 24\n    # not really optional, but the user will never submit this so optional hack\n    optional: true\n  name:\n    type: String\n    min: 6\n  points:\n    type: Number\n    # not really optional, but the user will never submit this so optional hack\n    optional: true\n  members:\n    type: [MemberSchema]\n    optional: true\n  admins:\n    type: [MemberSchema]\n    optional: true\n  # hack to pass organization id to meteor method from autoform\n  organizationId:\n    type: String\n    max: 24\n    optional: true\n\nOrganizationSchema = new SimpleSchema\n  name:\n    type: String\n    min: 3\n    max: 100\n  points:\n    type: Number\n    autoValue: -> if this.isInsert then 0 else @value\n  members:\n    type: [MemberSchema]\n    optional: true\n  groups:\n    type: [GroupSchema]\n    optional: true\n  subdomain:\n    type: String\n\nOrganizations = new Meteor.Collection 'organizations',\n  schema: OrganizationSchema\n\nif Meteor.isClient\n  Meteor.startup ->\n    AutoForm.addHooks ['organizationInsertForm', 'organizationDeleteForm'],\n      before:\n        remove: (docId) ->\n          # clean up all roles\n          Meteor.call 'cleanOrganizationRoles', docId\n          return true\n      after:\n        insert: (error, result, template) -> unless error\n          alertMessage 'Success! Organizion created.', 'success'\n        update: (error, result, template) -> unless error\n          alertMessage 'Success! Organizion updated.', 'success'\n        remove: (error, result, template) -> unless error\n          alertMessage 'Success! Organization removed.', 'success'\n      onError: (operation, error, template) ->\n        console.log error\n        alertMessage 'Oops...something went wrong. ' + error.message, 'danger'\n\nOrganizations.allow\n  insert: (userId, doc, field, mods) ->\n    (_.where(Meteor.user().roles, dropoly: 'super-admin').length > 0)\n  update: (userId, doc) -> false\n  remove: (userId, doc) -> false\n\nMeteor.methods\n  ### organization members ###\n  insertOrganizationMember: (doc) ->\n    organizationId = doc.organizationId\n    # check user credentials\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to insert an organization member'\n    # bail from client on simulation bc we haven't published users collection\n    unless this.isSimulation\n      user = findUserFromUsernameOrEmail doc\n      # insert user to organization set\n      Organizations.update organizationId,\n        $addToSet: members: user, { validate: false }\n      # find whole user\n      user = Meteor.users.findOne user.userId\n      # earn organization points\n      if user?.secureProfile?.points?\n        PointsHub.earnOrganizationPoints user.secureProfile.points,\n          organizationId\n      # add membership to user roles\n      newRole = role: 'memberOrganization', organizationId: organizationId\n      Meteor.users.update { _id: user._id }, { $addToSet: roles: newRole }\n\n  deleteOrganizationMember: (userId, organizationId) ->\n    # if user can't insert then can't delete\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to delete an organization admin'\n    # pull member from organization\n    Organizations.update organizationId, $pull: members: userId: userId,\n      { validate: false }\n    # bail from client on simulation bc we haven't published users collection\n    unless this.isSimulation\n      # find user\n      user = Meteor.users.findOne userId\n      # unearn organization points\n      if user?.secureProfile?.points?\n        PointsHub.earnOrganizationPoints (-user.secureProfile.points),\n          organizationId\n      # pull role from user\n      Meteor.users.update { _id: userId },\n        { $pull: roles:\n          role: 'memberOrganization', organizationId: organizationId }\n\n  ### groups ###\n  insertGroup: (doc) ->\n    organizationId = doc.organizationId\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to create a class'\n    doc = _.pick doc, 'name'\n    doc.groupId = Random.id()\n    doc.points = 0\n    GroupSchema.clean doc\n    check doc, GroupSchema\n    # insert group to organization\n    Organizations.update { _id: organizationId },\n      { $push: groups: doc},\n      { validate: false }\n    doc.groupId\n\n  deleteGroup: (organizationId, groupId) ->\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to delete a class'\n    Organizations.update { _id: organizationId },\n      { $pull: groups: groupId: groupId },\n      { validate: false }\n    # clean up roles\n    Meteor.users.update {},\n      { $pull: roles: organizationId: organizationId, groupId: groupId },\n      { multi: true }\n\n  ### group members ###\n  insertGroupMember: (organizationId, groupId, userId) ->\n    # check user credentials\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to add a member to a group'\n    # bail from client on simulation bc we haven't published users collection\n    unless this.isSimulation\n      user = findUserFromUserId userId\n      userInsert = _.pick user, 'userId', 'username'\n      # $addToSet update query always returns 1, hax to check if user exists\n      isInGroup = (Organizations.find _id: organizationId, \\\n        groups: $elemMatch: groupId: groupId, \\\n        members: $elemMatch: userId: userId).count()\n      unless isInGroup\n        # insert user to members set\n        Organizations.update _id: organizationId, 'groups.groupId': groupId,\n          $addToSet: 'groups.$.members': userInsert, { validate: false }\n        # TODO: update group points\n        # update roles\n        newRole =\n          role: 'memberGroup',\n          organizationId: organizationId,\n          groupId: groupId\n        Meteor.users.update { _id: user.userId }, { $addToSet: roles: newRole }\n        # earn group points\n        PointsHub.earnOrganizationGroupPoints user.points,\n          organizationId, groupId\n\n  deleteGroupMember: (userId, organizationId, groupId) ->\n    # if user can't insert then can't delete\n    unless can.insertAdmin organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to delete an organization admin'\n    # pull member from organization\n    Organizations.update { _id: organizationId, 'groups.groupId': groupId },\n      { $pull: 'groups.$.members': userId: userId},\n      { validate: false }\n    unless this.isSimulation\n      # $addToSet update query always returns 1, hax to check if user exists\n      isInGroup = (Organizations.find _id: organizationId, \\\n        groups: $elemMatch: groupId: groupId, \\\n        admins: $elemMatch: userId: userId).count()\n      unless isInGroup\n        # pull role from member\n        Meteor.users.update { _id: userId },\n          { $pull: roles: role: 'memberGroup', groupId: groupId }\n        # unearn group points\n        user = findUserFromUserId userId\n        PointsHub.earnOrganizationGroupPoints -user.points,\n          organizationId, groupId\n\n  ### group admins ###\n  insertGroupAdmin: (organizationId, groupId, userId) ->\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to add a member to a group'\n    # bail from client on simulation bc we haven't published users collection\n    unless this.isSimulation\n      user = findUserFromUserId userId\n      userInsert = _.pick (findUserFromUserId userId), 'userId'\n      # $addToSet update query always returns 1, hax to check if user exists\n      isInGroup = (Organizations.find _id: organizationId, \\\n        groups: $elemMatch: groupId: groupId, \\\n        admins: $elemMatch: userId: userId).count()\n      unless isInGroup\n        # insert user to members set\n        Organizations.update _id: organizationId, 'groups.groupId': groupId,\n          $addToSet: 'groups.$.admins': userInsert, { validate: false }\n        # TODO: update group points\n        # update roles\n        newRole =\n          role: 'memberGroupAdmin',\n          organizationId: organizationId,\n          groupId: groupId\n        Meteor.users.update { _id: user.userId }, { $addToSet: roles: newRole }\n        # earn group points\n        PointsHub.earnOrganizationGroupPoints user.points,\n          organizationId, groupId\n\n  deleteGroupAdmin: (userId, organizationId, groupId) ->\n    # if user can't insert then can't delete\n    unless can.insertAdmin organizationId\n      throw new Meteor.Error 403,\n        'You do not have permission to delete an organization admin'\n    # pull admin from organization\n    Organizations.update _id: organizationId, 'groups.groupId': groupId,\n      $pull: 'groups.$.admins': userId: userId, { validate: false }\n    unless this.isSimulation\n      # $addToSet update query always returns 1, hax to check if user exists\n      isInGroup = (Organizations.find _id: organizationId, \\\n        groups: $elemMatch: groupId: groupId, \\\n        admins: $elemMatch: userId: userId).count()\n      unless isInGroup\n        # pull role from member\n        Meteor.users.update { _id: userId },\n          { $pull: roles: role: 'memberGroupAdmin', groupId: groupId }\n        # unearn group points\n        user = findUserFromUserId userId\n        PointsHub.earnOrganizationGroupPoints -user.points,\n          organizationId, groupId\n\n  ### clean up roles on delete organization ###\n  cleanOrganizationRoles: (organizationId) ->\n    # if user can't insert, then can't delete\n    unless can.insertOrganizationMember organizationId\n      throw new Meteor.Error 403,\n        'You do not have permissionto delete an organization'\n    # clean up all roles\n    Meteor.users.update {},\n      { $pull: roles: organizationId: organizationId },\n      { multi: true }\n\n  adminAddPoints: (groupId, studentId) ->\n    user = Meteor.user()\n    unless user?\n      return\n    role = _.findWhere user.roles, groupId: groupId\n    console.log role\n    unless role? and role.role is 'memberGroupAdmin'\n      return\n    points = Points.teacherPoints\n    student = Meteor.users.update { _id: studentId }\n    PointsHub.earnUserPoints points, student\n    # TODO: remove points from points bank\n\nif Meteor.isServer\n  ### server helper functions ###\n  findUserFromUserId = (userId) ->\n    # bail on the client where 'users' collection isn't present\n    unless this.isSimulation\n      # look up doc user and extend\n      user = Meteor.users.findOne userId\n      # TODO: verify user is a member of the organization\n      user.userId = user._id\n\n      if user.secureProfile?.points?\n        user.points = user.secureProfile.points\n      else\n        user.points = 0\n      user = _.pick user, 'userId', 'username', 'points'\n      MemberSchema.clean user\n      check user, MemberSchema\n      user\n\n  # find user from username or email, return user pick userId, email, username\n  findUserFromUsernameOrEmail = (doc) ->\n    # look up doc user and extend\n    if doc.email then user = Meteor.users.findOne 'emails.address': doc.email\n    else if doc.username then user = Meteor.users.findOne username: doc.username\n    else throw new Meteor.Error 400, 'Need email or username to find admin'\n\n    # update doc with user properties\n    unless _.isUndefined user\n      doc.username = user.username\n      doc.email = user.emails && user.emails[0].address\n      doc.userId = user._id\n    else unless this.isSimulation\n      throw new Meteor.Error 404, 'User not found.'\n    else return\n\n    if user.secureProfile?.points? then doc.points = user.secureProfile.points\n    else doc.points = 0\n\n    doc = _.pick doc, 'userId', 'username', 'points'\n    MemberSchema.clean doc\n    check doc, MemberSchema\n    return doc\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1018,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/collections/organizations.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9f341daa07240d1d381851d1e64d29c90fcebb1d","deserializer":"TextBuffer"},{"text":"<template name='membersLeaderboard'>\n  <div class='row col-xs-12 lbContentBlock'>\n    <h5>Students</h5>\n    {{#each sortedMembers}}\n      <div class='lbInfo'>\n        <span> {{username}} </span>\n        <span> - {{points}} points </span>\n        <span> - {{percentToGoal}}% of {{goalPoints}} point goal</span>\n      </div>\n      <div class=\"progress\">\n        <div class='progress-bar' role='progressbar' aria-valuenow='{{percentToGoal}}' aria-valuemin='0' aria-valuemax='100' style='width: {{percentToGoal}}%;'>\n          <span class='sr-only'>{{percentToGoal}}% Complete</span>\n        </div>\n      </div>\n    {{/each}}\n  </div>\n  <div class='row col-xs-12 lbContentBlock lbAdmin'>\n    {{#if sortedAdmins}}\n      <h5>Teacher</h5>\n      {{#each sortedAdmins}}\n        <div class='lbInfo'>\n          <span> {{username}} </span>\n          <span> - {{points}} points </span>\n        </div>\n      {{/each}}\n    {{/if}}\n  </div>\n</template>\n","markers":{"markers":{"1":{"id":1,"range":[[23,14],[23,14]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1042,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"5":{"id":5,"range":[[5,0],[5,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[11,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"32":{"id":32,"range":[[11,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"45":{"id":45,"range":[[11,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"54":{"id":54,"range":[[11,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"71":{"id":71,"range":[[11,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"170":{"id":170,"range":[[1,0],[2,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"171":{"id":171,"range":[[4,0],[5,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"172":{"id":172,"range":[[10,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"173":{"id":173,"range":[[16,0],[17,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"174":{"id":174,"range":[[20,0],[23,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"181":{"id":181,"range":[[1,0],[1,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"182":{"id":182,"range":[[4,0],[4,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"183":{"id":183,"range":[[10,0],[10,160]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"184":{"id":184,"range":[[16,0],[16,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"185":{"id":185,"range":[[20,0],[22,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"  <div class='row col-xs-12 lbContentBlock'>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"  <div class=\"row col-xs-12 lbContentBlock\">\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[5,0]],"oldText":"","newText":"      <div class='lbInfo'>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[5,0],[6,0]],"newRange":[[5,0],[5,0]],"oldText":"      <div>\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[10,0],[10,0]],"newRange":[[10,0],[11,0]],"oldText":"","newText":"        <div class='progress-bar' role='progressbar' aria-valuenow='{{percentToGoal}}' aria-valuemin='0' aria-valuemax='100' style='width: {{percentToGoal}}%;'>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[12,0]],"newRange":[[11,0],[11,0]],"oldText":"        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{percentToGoal}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{percentToGoal}}%;\">\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[17,0]],"oldText":"","newText":"  <div class='row col-xs-12 lbContentBlock lbAdmin'>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[18,0]],"newRange":[[17,0],[17,0]],"oldText":"  <div class=\"row col-xs-12 lbContentBlock lbAdmin\">\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[23,0]],"oldText":"","newText":"        <div class='lbInfo'>\n          <span> {{username}} </span>\n          <span> - {{points}} points </span>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[23,0],[26,0]],"newRange":[[23,0],[23,0]],"oldText":"        <div>\n          <span>{{username}}</span>\n          <span> - {{points}} points</span>\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.html","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1b135eb44e17f8926095a30246199d7bc5ed87c5","deserializer":"TextBuffer"},{"text":"<template name='groupLeaderboard'>\n  <div class='lbInfo'>\n    <h5> {{name}} </h5>\n    <span> - {{points}} pts </span>\n    <span> - {{percentToGoal}}% of {{goalPoints}} point goal </span>\n  </div>\n  <div class='progress'>\n    <div class='progress-bar' role='progressbar' aria-valuenow='{{percentToGoal}}' aria-valuemin='0' aria-valuemax='100' style='width: {{percentToGoal}}%;'>\n      <span class='sr-only'>{{percentToGoal}}% Complete</span>\n    </div>\n  </div>\n</template>\n","markers":{"markers":{"1":{"id":1,"range":[[4,8],[4,8]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1050,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"4":{"id":4,"range":[[5,0],[5,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"91":{"id":91,"range":[[1,0],[5,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"92":{"id":92,"range":[[6,0],[8,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[5,0]],"oldText":"","newText":"  <div class='lbInfo'>\n    <h5> {{name}} </h5>\n    <span> - {{points}} pts </span>\n    <span> - {{percentToGoal}}% of {{goalPoints}} point goal </span>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[5,0],[8,0]],"newRange":[[5,0],[5,0]],"oldText":"  <div>\n    <h5>{{name}}</h5>\n    <span>- {{points}} pts - {{percentToGoal}}% of {{goalPoints}} point goal</span>\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[8,0]],"oldText":"","newText":"  <div class='progress'>\n    <div class='progress-bar' role='progressbar' aria-valuenow='{{percentToGoal}}' aria-valuemin='0' aria-valuemax='100' style='width: {{percentToGoal}}%;'>\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[10,0]],"newRange":[[8,0],[8,0]],"oldText":"  <div class=\"progress\">\n    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{percentToGoal}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{percentToGoal}}%;\">\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.html","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"951da4f9494e873ed6e37db2b71a4196b2ec4fb9","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"id":3,"items":[{"id":1018,"softTabs":true,"displayBuffer":{"id":1019,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/collections/organizations.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1042,"softTabs":true,"displayBuffer":{"id":1043,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.html","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1050,"softTabs":true,"displayBuffer":{"id":1051,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.html","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":986,"softTabs":true,"displayBuffer":{"id":987,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/package.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.html","focused":true,"deserializer":"Pane"},{"id":684,"items":[{"id":925,"softTabs":true,"displayBuffer":{"id":926,"softWrap":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":668,"softTabs":true,"displayBuffer":{"id":669,"softWrap":true,"editorWidthInChars":85,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.coffee","focused":false,"deserializer":"Pane"}],"orientation":"horizontal","deserializer":"PaneAxis"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-coffee-script","language-html","language-javascript"],"deserializer":"Workspace"},"packageStates":{"coffee-lint":{"height":0},"gitter":{},"fuzzy-finder":{"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/collections/organizations.coffee":1408461289334,"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.html":1408481089020,"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.html":1408462199239,"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/package.js":1408481025554,"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/groupLeaderboard.coffee":1408386030742,"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.coffee":1408481036433},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":182687673},"tree-view":{"directoryExpansionStates":{"client":{"helpers":{},"views":{}},"collections":{}},"selectedPath":"/Users/andrewhazlett/Dev/src/smartPackages/organization-points/client/views/leaderboard.html","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["\""],"replaceHistory":["'"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}