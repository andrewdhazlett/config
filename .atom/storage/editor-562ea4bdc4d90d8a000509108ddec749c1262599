{"mode":"editor","version":1,"windowDimensions":{"x":4,"y":22,"width":2556,"height":1418},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/andrewhazlett/Dev/src/webapp/packages/cucumber","buffers":[{"text":"\n\n# Runs tests remotely via subscribe/publish\nclass Cucumber.Runner.Remote extends Cucumber.Runner\n\n  constructor: (@mirror) -> super\n\n  reload: (file) -> @mirror.publish command: 'reload', file: file\n\n  _pipe: (src, dest) ->\n    piped = false\n    _pipe = ->\n      piped = true\n      src.pipe dest\n    switch src._readableState.pipesCount\n      when 0 then _pipe()\n      when 1 then _pipe() unless src._readableState.pipes is dest\n      else _pipe() unless dest in src._readableState.pipes\n    piped\n\n  _run: (callback) ->\n    @mirror.start (err) =>\n      return callback err if err?\n      id = Date.now()\n      piped = @_pipe @mirror.child.stdout, process.stdout\n\n      cleanup = =>\n        clearTimeout timeout\n        @mirror.unsubscribe subscription\n        @mirror.child.stdout.unpipe process.stdout if piped\n\n      timeout = setTimeout ->\n        cleanup()\n        callback new Error 'Remote run timed out'\n      , 60000 # XXX Make this a setting and add to other runners\n\n      subscription = (msg) ->\n        return unless msg?.id is id\n        cleanup()\n        return callback new Error 'Remote error' if msg.result is 'error'\n        callback null, msg.result\n\n      @mirror.subscribe subscription\n      @mirror.publish id: id, command: 'run'\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":33},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/remote.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ee6bea45d5e8ace5c24f5bce0a7ac246f6bceb85","deserializer":"TextBuffer"},{"text":"\n\n# Runs tests locally on a mirror, reporting back via subscribe/publish\nclass Cucumber.Runner.Mirror extends Cucumber.Runner.Local\n  \n  constructor: ->\n    super\n    @mirror.subscribe (msg) =>\n      @reload msg.file if msg?.command is 'reload'\n      return unless msg?.command is 'run'\n      @run (err, result) =>\n        result = 'error' if err?\n        @mirror.publish id: msg.id, result: result\n\n  _startMirror: (callback) -> callback null\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/mirror.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9f62a10f26be24ed6b948c63f09a9fcb72e4f8b9","deserializer":"TextBuffer"},{"text":"\ncucumber = Npm.require 'cucumber'\nModule = Npm.require 'module'\n\n\n# Runs tests locally\nclass Cucumber.Runner.Local extends Cucumber.Runner\n\n  constructor: (@mirror) ->\n    super()\n    @_reloads = []\n    @_configuration = cucumber.Cli.Configuration @_args()\n    argumentParser = cucumber.Cli.ArgumentParser @_args()\n    argumentParser.parse()\n    patchHelper = @_patchHelper\n    @_configuration.getSupportCodeLibrary = ->\n      supportCodeFilePaths = argumentParser.getSupportCodeFilePaths()\n      supportCodeLoader = cucumber.Cli.SupportCodeLoader supportCodeFilePaths\n      supportCodeLoader._buildSupportCodeInitializerFromPaths =\n        supportCodeLoader.buildSupportCodeInitializerFromPaths\n      supportCodeLoader.buildSupportCodeInitializerFromPaths = (paths) ->\n        wrapper = supportCodeLoader._buildSupportCodeInitializerFromPaths paths\n        # coffeelint: disable=missing_fat_arrows\n        ->\n          patchHelper this\n          wrapper.call this\n        # coffeelint: enable=missing_fat_arrows\n      supportCodeLoader.getSupportCodeLibrary()\n\n  _patchHelper: (helper) ->\n    return if helper._patched?\n    helper._patched = true\n    helper._defineStep = helper.defineStep\n    helper.defineStep = (name, code) ->\n      helper._defineStep name, Cucumber.Util.bindEnv code\n    helper.Given = helper.When = helper.Then = helper.defineStep\n    for type in ['Around', 'Before', 'After']\n      do (type) ->\n        helper[\"_define#{type}Hook\"] = helper[\"define#{type}Hook\"]\n        helper[\"define#{type}Hook\"] = (args..., code) ->\n          helper[\"_define#{type}Hook\"] args..., Cucumber.Util.bindEnv code\n\n  _args: ->\n    args = [null, null]\n    if Cucumber.settings.format?\n      args = args.concat '--format', Cucumber.settings.format\n    args = args.concat '--coffee' if Cucumber.settings.coffee\n    args = args.concat '--tags', tag for tag in Cucumber.settings.tags\n    args.concat [Cucumber.settings.path]\n\n  _startMirror: (callback) ->\n    if @mirror? then @mirror.start callback else callback null\n\n  _formatter: (callback) ->\n    fmt = new cucumber.Listener.JsonFormatter\n    fmt.log = (results) -> callback null, JSON.parse results\n    fmt\n\n  _runtime: (callback) ->\n    runtime = cucumber.Runtime @_configuration\n    runtime.attachListener @_formatter callback\n    if Cucumber.settings.format?\n      runtime.attachListener @_configuration.getFormatter()\n    runtime\n\n  _run: (callback) =>\n    @_reload()\n    @_startMirror (err) =>\n      return callback err if err?\n      features = null\n      success = null\n      called = false\n\n      _callback = (err, _features, _success) ->\n        return if called\n        features ?= _features\n        success ?= _success\n        return unless features? and success? or err?\n        called = true\n        return callback err if err?\n        result = if success then 'passed' else 'failed'\n        callback null, result: result, features: features\n\n      @_runtime(_callback).start (success) -> _callback null, null, success\n\n  reload: (file) -> @_reloads.push file\n\n  _reload: ->\n    [reloads, @_reloads] = [@_reloads, []]\n    @_disrequire file for file in reloads\n\n  _disrequire: (file) -> delete Module._cache[file] if Module._cache[file]?\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/local.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b2428eedeb8131be3ab6fbf9a18da2bc875ed889","deserializer":"TextBuffer"},{"text":"\n\nclass Cucumber.Watcher.Rerun extends Cucumber.Watcher\n\n  name: 'Rerun'\n\n  _options: -> ignoreInitial: true\n\n  _callback: ->\n    Meteor.bindEnvironment (evt, file, stat) =>\n      return unless @_isCode(file) or @_isFeature file\n      @_debug \"Event '#{evt}' for #{file} triggered test run\"\n      Cucumber.runner.reload file\n      Cucumber.run (err, succeeded) =>\n        result = if succeeded then 'passed' else 'failed'\n        @_debug \"Run triggered by '#{evt}' for #{file} #{result}\"\n    , (err) => @_debug 'Error in watcher callback', err\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/rerun.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"623e9659fb9e4c4c5c53e34ba585ca378d1d1041","deserializer":"TextBuffer"},{"text":"\npath = Npm.require 'path'\n\n\nclass Cucumber.Watcher.Velocity extends Cucumber.Watcher\n\n  name: 'Velocity'\n\n  _TestFileCollection: Package.velocity?.VelocityTestFiles\n\n  _callback: ->\n    return (-> ) unless Package.velocity?\n    Meteor.bindEnvironment (evt, file, stat) =>\n      return unless @_isFeature file\n      @_debug \"Event '#{evt}' for #{file} triggered test file update\"\n      return @_TestFileCollection.remove _id: file if evt is 'unlink'\n      @_TestFileCollection.upsert {_id: file}, @_testFile file, stat\n    , (err) => @_debug 'Error in watcher callback', err\n\n  _relativePath: (file) ->\n    path.join path.basename(@watch_path), path.relative @watch_path, file\n\n  _path: (file) -> path.dirname @_relativePath file\n\n  _testFile: (file, stat = null) ->\n    _id: file\n    name: path.basename file\n    absolutePath: file\n    relativePath: @_relativePath file\n    path: @_path file\n    targetFramework: 'cucumber'\n    lastModified: stat?.mtime?.getTime?() ? Date.now()\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":49},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/velocity.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e9cc6987916ef22c994d1b83fefd35a63a85117a","deserializer":"TextBuffer"},{"text":"\ndebug = -> console.log 'Cucumber -', arguments... if Cucumber.settings.debug\n\n\nclass Cucumber\n\n  @run: -> @runner.run arguments...\n\n  @_init: ->\n    debug 'Settings', @settings\n    @_initMirror()\n    return unless @settings.enabled\n    @_initRunner()\n    @_initReporters()\n    @_initWatchers()\n    @_initStartup()\n\n  @_initMirror: ->\n    return unless @settings.mirror\n    debug 'Building mirror'\n    @mirror = new Package.mirror.Mirror 'cucumber',\n      cucumber:\n        enabled: @settings.remote\n        startup: false\n        watch: false\n        velocity: false\n        tags: @settings.tags\n        coffee: @settings.coffee\n      selenium: _.extend {}, Meteor.settings.selenium,\n        enabled: @settings.remote\n        server:\n          download: false\n          start: false\n        chrome:\n          download: false\n\n  @_initRunner: ->\n    debug 'Building runner'\n    @runner = if @settings.mirror and @settings.remote\n      if @mirror.isMirror\n        debug 'Building mirror runner'\n        new @Runner.Mirror @mirror\n      else\n        debug 'Building remote runner'\n        new @Runner.Remote @mirror\n    else\n      debug 'Building local runner'\n      new @Runner.Local @mirror\n\n  @_initReporters: ->\n    @reporters = {}\n    @reporters.velocity = new @Reporter.Velocity if @settings.velocity\n\n  @_initWatchers: ->\n    @watchers = rerun: new @Watcher.Rerun @settings.path\n    if @settings.velocity\n      @watchers.velocity = new @Watcher.Velocity @settings.path\n    watcher.watch() for name, watcher of @watchers if @settings.watch\n\n  @_initStartup: ->\n    return unless @settings.startup\n    startup = Meteor.bindEnvironment =>\n      debug 'Cucumber running startup'\n      @runner.run()\n    if Package.webapp\n      return startup() if Package.webapp.WebApp.httpServer?._handle?\n      return Package.webapp.WebApp.onListening startup\n    return startup() if Package.cucumber?\n    Meteor.startup startup\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":53},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/index.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bbee3c2db4d0e9d52a3e932e78969ac8d146e41d","deserializer":"TextBuffer"},{"text":"\nCucumber._init()\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":57},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/main.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"baf3c4c3558620b3b3a2b58e22001faa9008821f","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":33,"softTabs":true,"displayBuffer":{"id":34,"softWrap":true,"editorWidthInChars":231,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/remote.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":45,"softTabs":true,"displayBuffer":{"id":46,"softWrap":true,"editorWidthInChars":231,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/rerun.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":49,"softTabs":true,"displayBuffer":{"id":50,"softWrap":true,"editorWidthInChars":231,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/velocity.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":53,"softTabs":true,"displayBuffer":{"id":54,"softWrap":true,"editorWidthInChars":230,"scrollTop":29,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/index.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":57,"softTabs":true,"displayBuffer":{"id":58,"softWrap":true,"editorWidthInChars":232,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/main.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":37,"softTabs":true,"displayBuffer":{"id":38,"softWrap":true,"editorWidthInChars":231,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/mirror.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":41,"softTabs":true,"displayBuffer":{"id":42,"softWrap":true,"editorWidthInChars":231,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/local.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/index.coffee","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/remote.coffee":1401932521870,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/rerun.coffee":1401932558399,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/watcher/velocity.coffee":1401932567387,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/index.coffee":1401933396299,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/main.coffee":1401932582164,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/mirror.coffee":1401932520252,"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/runner/local.coffee":1401932509927},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1399654},"tree-view":{"directoryExpansionStates":{"src":{"reporter":{},"runner":{},"watcher":{},"world":{}}},"selectedPath":"/Users/andrewhazlett/.meteorite/packages/cucumber/xdissent/meteor-cucumber/ce27a9efc42ad9c89d9434f6060b7515a2dbcb65/src/index.coffee","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}