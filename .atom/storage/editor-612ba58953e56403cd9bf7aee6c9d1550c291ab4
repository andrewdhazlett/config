{"mode":"editor","version":1,"windowDimensions":{"x":355,"y":60,"width":1722,"height":1418},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/andrewhazlett","buffers":[{"text":"/**\n * @todo: recursively send requests until all contacts are fetched\n *\n * @see https://developers.google.com/google-apps/contacts/v3/reference#ContactsFeed\n *\n * To API test requests: \n *\n * @see https://developers.google.com/oauthplayground/\n *\n * To format JSON nicely:\n *\n * @see http://jsonviewer.stack.hu/\n *\n * Note: The Contacts API has a hard limit to the number of results it can return at a \n * time even if you explicitly request all possible results. If the requested feed has \n * more fields than can be returned in a single response, the API truncates the feed and adds \n * a \"Next\" link that allows you to request the rest of the response.\n */\nvar EventEmitter = Npm.require('events').EventEmitter,\n  _ = Npm.require('underscore'),\n  qs = Npm.require('querystring'),\n  util = Npm.require('util'),\n  url = Npm.require('url'),\n  https = Npm.require('https'),\n  querystring = Npm.require('querystring');\n\nGoogleContacts = function (opts) {\n  if (typeof opts === 'string') {\n    opts = { token: opts };\n  }\n  if (!opts) {\n    opts = {};\n  }\n\n  this.contacts = [];\n  this.consumerKey = opts.consumerKey ? opts.consumerKey : null;\n  this.consumerSecret = opts.consumerSecret ? opts.consumerSecret : null;\n  this.token = opts.token ? opts.token : null;\n  this.refreshToken = opts.refreshToken ? opts.refreshToken : null;\n};\n\nGoogleContacts.prototype = {};\n\nutil.inherits(GoogleContacts, EventEmitter);\n\n\nGoogleContacts.prototype._get = function (params, cb) {\n  var self = this;\n\n  if (typeof params === 'function') {\n    cb = params;\n    params = {};\n  }\n\n  var req = {\n    host: 'www.google.com',\n    port: 443,\n    path: this._buildPath(params),\n    method: 'GET',\n    headers: {\n      'Authorization': 'OAuth ' + this.token\n    }\n  };\n\n  // console.log(req);\n\n  https.request(req, function (res) {\n    var data = '';\n\n    res.on('end', function () {\n      if (res.statusCode < 200 || res.statusCode >= 300) {\n        var error = new Error('Bad client request status: ' + res.statusCode);\n        return cb(error);\n      }\n      try {\n        data = JSON.parse(data);\n        cb(null, data);\n      }\n      catch (err) {\n        cb(err);\n      }\n    });\n\n    res.on('data', function (chunk) {\n      //console.log(chunk.toString());\n      data += chunk;\n    });\n\n    res.on('error', function (err) {\n      cb(err);\n    });\n\n    //res.on('close', onFinish);\n  }).on('error', function (err) {\n    cb(err);\n  }).end();\n};\n\nGoogleContacts.prototype._getPhotoData = function (params, cb) {\n  var self = this;\n\n  if (typeof params === 'function') {\n    cb = params;\n    params = {};\n  }\n\n  var req = {\n    host: 'www.google.com',\n    port: 443,\n    path: this._buildPath(params),\n    method: 'GET',\n    headers: {\n      'Authorization': 'OAuth ' + this.token\n    }\n  };\n\n  // console.log(req);\n\n  https.request(req, function (res) {\n    var data;\n    var dataType = false;\n    // var data = new Buffer();\n\n    res.on('end', function () {\n      if (res.statusCode < 200 || res.statusCode >= 300) {\n        var error = new Error('Bad client request status: ' + res.statusCode);\n        return cb(error);\n      }\n      try {\n        // console.log('end: ', data.length);\n        cb(null, data);\n      }\n      catch (err) {\n        cb(err);\n      }\n    });\n\n    res.on('data', function (chunk) {\n      // console.log(req.path, \" : \", chunk.toString().length, \": \", chunk.length);\n      if (dataType) {\n        chunk_buffer = new Buffer(chunk, 'binary');\n        // data += chunk;\n        data = Buffer.concat([data, chunk_buffer]);\n      } else {\n        data = new Buffer(chunk, 'binary');\n        dataType = true;\n        // console.log('start: ');\n      }\n      // console.log('chunk: ', chunk.length);\n    });\n\n    res.on('error', function (err) {\n      cb(err);\n    });\n\n    //res.on('close', onFinish);\n  }).on('error', function (err) {\n    cb(err);\n  }).end();\n};\n\nGoogleContacts.prototype.getPhoto = function (path, cb) {\n  var self = this;\n\n  this._getPhotoData({path: path}, receivedPhotoData);\n  function receivedPhotoData(err, data) {\n    cb(err, data);\n  }\n};\n\nGoogleContacts.prototype.getContacts = function (cb, contacts) {\n  var self = this;\n\n  this._get({ type: 'contacts' }, receivedContacts);\n  function receivedContacts(err, data) {\n    if (err) return cb(err);\n\n    self._saveContactsFromFeed(data.feed);\n\n    var next = false;\n    data.feed.link.forEach(function (link) {\n      if (link.rel === 'next') {\n        next = true;\n        var path = url.parse(link.href).path;\n        self._get({ path: path }, receivedContacts);\n      }\n    });\n    if (!next) {\n      cb(null, self.contacts);\n    }\n  }\n};\n\nGoogleContacts.prototype._saveContactsFromFeed = function (feed) {\n  var self = this;\n  //console.log(feed);\n  var i = 0;\n  feed.entry.forEach(function (entry) {\n    try {\n      var name = entry.title['$t'];\n      var email = entry['gd$email'][0].address; // only save first email\n      var photoUrl;\n      var mimeType;\n      entry.link.some(function(link) {\n        if ((link.rel) && (link.rel.indexOf('#photo') !== -1) && (link.type.indexOf('image') !== -1)){\n          photoUrl = link.href;\n          mimeType = link.type;\n          // console.log(link);\n        }\n      });\n      if (photoUrl){\n        self.contacts.push({ name: name, email: email, photoUrl: photoUrl, mime_type: mimeType});\n      }\n    }\n    catch (e) {\n      // property not available...\n    }\n  });\n  // console.log(self.contacts);\n  console.log(self.contacts.length);\n};\n\nGoogleContacts.prototype._buildPath = function (params) {\n  if (params.path) return params.path;\n\n  params = params || {};\n  params.type = params.type || 'contacts';\n  params.alt = params.alt || 'json';\n  params.projection = params.projection || 'thin';\n  params.email = params.email || 'default';\n  params['max-results'] = params['max-results'] || 2000;\n\n  var query = {\n    alt: params.alt,\n    'max-results': params['max-results']\n  };\n\n  var path = '/m8/feeds/';\n  path += params.type + '/';\n  path += params.email + '/';\n  path += params.projection;\n  path += '?' + qs.stringify(query);\n\n  return path;\n};\n\nGoogleContacts.prototype.refreshAccessToken = function (refreshToken, cb) {\n  if (typeof params === 'function') {\n    cb = params;\n    params = {};\n  }\n\n  var data = {\n    refresh_token: refreshToken,\n    client_id: this.consumerKey,\n    client_secret: this.consumerSecret,\n    grant_type: 'refresh_token'\n\n  };\n\n  var body = qs.stringify(data);\n\n  var opts = {\n    host: 'accounts.google.com',\n    port: 443,\n    path: '/o/oauth2/token',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': body.length\n    }\n  };\n\n  //console.log(opts);\n  //console.log(data);\n\n  var req = https.request(opts, function (res) {\n    var data = '';\n    res.on('end', function () {\n      if (res.statusCode < 200 || res.statusCode >= 300) {\n        var error = new Error('Bad client request status: ' + res.statusCode);\n        return cb(error);\n      }\n      try {\n        data = JSON.parse(data);\n        //console.log(data);\n        cb(null, data.access_token);\n      }\n      catch (err) {\n        cb(err);\n      }\n    });\n\n    res.on('data', function (chunk) {\n      //console.log(chunk.toString());\n      data += chunk;\n    });\n\n    res.on('error', function (err) {\n      cb(err);\n    });\n\n    //res.on('close', onFinish);\n  }).on('error', function (err) {\n    cb(err);\n  });\n\n  req.write(body);\n  req.end();\n};","markers":{"markers":{"1":{"id":1,"range":[[19,32],[20,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":112,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/andrewhazlett/.meteorite/packages/google-contacts/iyou/Meteor-Google-Contacts/21927ee0b427fa33beda25bdbda63f5725ab0efb/index.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"567de56406f5399acf424e544116c3cba720d32d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":112,"softTabs":true,"displayBuffer":{"id":113,"softWrap":true,"editorWidthInChars":102,"scrollTop":1638,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewhazlett/.meteorite/packages/google-contacts/iyou/Meteor-Google-Contacts/21927ee0b427fa33beda25bdbda63f5725ab0efb/index.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/andrewhazlett/.meteorite/packages/google-contacts/iyou/Meteor-Google-Contacts/21927ee0b427fa33beda25bdbda63f5725ab0efb/index.js","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/andrewhazlett/.meteorite/packages/google-contacts/iyou/Meteor-Google-Contacts/21927ee0b427fa33beda25bdbda63f5725ab0efb/index.js":1403286084960},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":195864623},"tree-view":{"directoryExpansionStates":{".meteorite":{"packages":{"google-contacts":{"iyou":{"Meteor-Google-Contacts":{"21927ee0b427fa33beda25bdbda63f5725ab0efb":{}}}}}}},"selectedPath":"/Users/andrewhazlett/.meteorite/packages/google-contacts/iyou/Meteor-Google-Contacts/21927ee0b427fa33beda25bdbda63f5725ab0efb/index.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":310}}}